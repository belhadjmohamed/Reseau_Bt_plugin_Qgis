# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Reseau_BTDialog
                                 A QGIS plugin
 Reseau_BT
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Reseau_BT
        email                : bemoh70@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'home.ui'))


class Reseau_BTDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Reseau_BTDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS1, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'noeuds.ui'))

class noeuds(QtWidgets.QDialog, FORM_CLASS1):
    def __init__(self, parent=None):
        """Constructor."""
        super(noeuds, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS2, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'nd_comptage.ui'))

class noeuds_comptage(QtWidgets.QDialog, FORM_CLASS2):
    def __init__(self, parent=None):
        """Constructor."""
        super(noeuds_comptage, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

FORM_CLASS3, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'nd_sortie_du_poste.ui'))

class noeuds_POSTE(QtWidgets.QDialog, FORM_CLASS3):
    def __init__(self, parent=None):
        """Constructor."""
        super(noeuds_POSTE, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)



FORM_CLASS4, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'nd_support.ui'))

class noeuds_supp(QtWidgets.QDialog, FORM_CLASS4):
    def __init__(self, parent=None):
        """Constructor."""
        super(noeuds_supp, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

FORM_CLASS5, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'codes_lignes.ui'))

class code_lignee(QtWidgets.QDialog, FORM_CLASS5):
    def __init__(self, parent=None):
        """Constructor."""
        super(code_lignee, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS6, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'code_dep.ui'))

class code_depart(QtWidgets.QDialog, FORM_CLASS6):
    def __init__(self, parent=None):
        """Constructor."""
        super(code_depart, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS7, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'code_der.ui'))

class code_derivation(QtWidgets.QDialog, FORM_CLASS7):
    def __init__(self, parent=None):
        """Constructor."""
        super(code_derivation, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS8, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'code_bran.ui'))

class code_branch(QtWidgets.QDialog, FORM_CLASS8):
    def __init__(self, parent=None):
        """Constructor."""
        super(code_branch, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS9, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'nd_amont_aval.ui'))

class nd_amont_avall(QtWidgets.QDialog, FORM_CLASS9):
    def __init__(self, parent=None):
        """Constructor."""
        super(nd_amont_avall, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS10, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'remplissage_att.ui'))

class rempl_att(QtWidgets.QDialog, FORM_CLASS10):
    def __init__(self, parent=None):
        """Constructor."""
        super(rempl_att, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


FORM_CLASS11, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'nd_chang_car.ui'))

class Chang_car(QtWidgets.QDialog, FORM_CLASS11):
    def __init__(self, parent=None):
        """Constructor."""
        super(Chang_car, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
